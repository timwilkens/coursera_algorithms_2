What is an undirected graph?

Definitions:
  path
  cycle
  connected
  connected components
  adjacent
  degree

What are some common graph processing problems?

What is the API for an undirected graph?

What is the 'easy way' to compute the average degree of an undirected graph?

What are the three representations of undirected graphs?

  Which is used in practice and why?

What is the performance for 'iterate over adj' for the 3 representations?

What is the memory usage for each?

What is the "design pattern" for graph processing algorithms?

What is the general algorithm for DFS?

What extra data structures are required for DFS?

How do you re-create a path from one vertex to another?

In what time does DFS mark all vertices connected to s?

What is the general outline for BFS?

Which of BFS and DFS solves the shortest path problem?

What 'collection' data structures does each algorithm use?

What is the general algorithm for finding connected components?
  - What is the running time of the pre-calculcation?
  - What lookup?

What does it mean for a graph to be 'bipartite'?

Which problems are 'do-able'?
  - Euler circuit
  - Hamiltonian circuit
  - Isomorphism
  - Planar graph

What are the differences between directed graphs and undirected graphs? How are their APIs different?

What kinds of problems can you represent with digraphs that you can't with undirected graphs?
  - What about with undirected graphs that you can't with digraphs?

How many possible digraphs are there with V vertices?

How is DFS on directed graphs used for garbage collection?

Do the DFS and BFS algorithms get changed for digraphs?

What is a DAG?

How is DFS modified to produce a topological sort?

What is relationship between cycles in a graph and a topological ordering?

What are "strongly connected components"?

How many strong connected components are there in a DAG of size (E,V)?

What is the Kosaraju-Sharir algorithm for finding strongly connected components?
